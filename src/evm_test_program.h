char code[146] = {
  0x60, 0x01, 0x60, 0x02, 0x01, 0x60, 0x00, 0x55, 0x60, 0x04, 0x35, 0x60, 0x01, 0x55, 0x60, 0x20, 0x60, 0x07, 0x60, 0x0f, 0x37, 0x60, 0x00, 0x51, 0x60, 0x02, 0x55, 0x60, 0x0a, 0x60, 0x00, 0x60, 0x20, 0x39, 0x60, 0x20, 0x51, 0x60, 0x03, 0x55, 0x60, 0x00, 0x54, 0x60, 0x02, 0x90, 0x03, 0x60, 0x04, 0x55, 0x60, 0x01, 0x60, 0x02, 0x60, 0x03, 0x82, 0x60, 0x05, 0x55, 0x50, 0x50, 0x50, 0x63, 0x00, 0x11, 0x45, 0x14, 0x60, 0x00, 0x52, 0x60, 0x0a, 0x5b, 0x60, 0x01, 0x90, 0x03, 0x80, 0x80, 0x53, 0x80, 0x60, 0x49, 0x57, 0x51, 0x60, 0x06, 0x55, 0x58, 0x60, 0x07, 0x55, 0x30, 0x60, 0x08, 0x55, 0x33, 0x60, 0x09, 0x55, 0x46, 0x60, 0x0a, 0x55, 0x59, 0x60, 0x0b, 0x55, 0x61, 0x04, 0x06, 0x56, 0x5b, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x0a, 0x60, 0x0a, 0x63, 0x00, 0x11, 0x45, 0x14, 0xf1, 0x60, 0x20, 0x60, 0x00, 0xf3, 0x5b, 0x60, 0x0c, 0x60, 0x0c, 0x55, 0x60, 0x71, 0x56
};

char call_data[64];

/*
// stack
push1 1
push1 2
add
push1 0  // 0: stack res
sstore

// calldata
push1 4
calldataload
push1 1  // 1: calldata load
sstore

push1 32
push1 7
push1 15
calldatacopy
push1 0
mload
push1 2  // 2: calldata copy
sstore

// code
push1 10
push1 0
push1 32
codecopy
push1 32
mload
push1 3  // 3: code copy
sstore

// returndata: todo

// storage & swap
push1 0
sload  // should be 3
push1 2
swap1
sub
push1 4  // 4: sload
sstore

// dup
push1 1
push1 2
push1 3
dup3
push1 5  // 5: dup
sstore
pop
pop
pop

// clear mem
push4 0x114514
push1 0
mstore

// jump
push1 10

jumpdest
push1 1
swap1
sub      // i -= 1

dup1
dup1
mstore8

dup1
push1 0x49
jumpi

// endloop
mload
push1 6  // 6: loop
sstore

// env
pc
push1 7  // 7: pc
sstore
address
push1 8  // 8: address
sstore
caller
push1 9  // 9: caller
sstore
chainid
push1 10
sstore
msize
push1 11
sstore

// test cross page jump
push2 1030
jump

// call
jumpdest
push1 0
push1 0
push1 0
push1 0
push1 10
push1 10
push4 0x114514
call

// return
push1 32
push1 0
return

// test cross page jump
jumpdest
push1 12
push1 12
sstore

push1 0x71
jump

*/
